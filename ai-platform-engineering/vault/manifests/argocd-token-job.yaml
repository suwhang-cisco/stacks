apiVersion: v1
kind: ServiceAccount
metadata:
  name: argocd-token-writer
  namespace: vault
  annotations:
    argocd.argoproj.io/sync-wave: "1"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argocd-token-secret-manager
  namespace: vault
  annotations:
    argocd.argoproj.io/sync-wave: "1"
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "create", "update", "patch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argocd-token-secret-manager-binding
  namespace: vault
  annotations:
    argocd.argoproj.io/sync-wave: "1"
subjects:
- kind: ServiceAccount
  name: argocd-token-writer
  namespace: vault
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argocd-token-secret-manager
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argocd-read-admin-and-deploy
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "1"
rules:
- apiGroups: [""]
  resources: ["secrets"]
  resourceNames: ["argocd-initial-admin-secret"]
  verbs: ["get"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  resourceNames: ["argocd-server"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argocd-read-admin-and-deploy-binding
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "1"
subjects:
- kind: ServiceAccount
  name: argocd-token-writer
  namespace: vault
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argocd-read-admin-and-deploy
---
apiVersion: batch/v1
kind: Job
metadata:
  name: argocd-token
  namespace: vault
  annotations:
    argocd.argoproj.io/sync-wave: "2"
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  backoffLimit: 1
  template:
    metadata:
      labels:
        app: argocd-token
    spec:
      serviceAccountName: argocd-token-writer
      restartPolicy: OnFailure
      containers:
      - name: generate-token
        image: bitnami/kubectl:1.28
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        - -c
        args:
        - |
          set -eu
          echo "Waiting for Argo CD server to be available..."
          kubectl -n argocd rollout status deploy/argocd-server --timeout=600s

          echo "Fetching initial admin password..."
          ADMIN_PWD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d || true)
          if [ -z "$ADMIN_PWD" ]; then
            echo "Admin password not found. Exiting."
            exit 1
          fi

          echo "Requesting Argo CD auth token..."
          if command -v curl >/dev/null 2>&1; then
            RESPONSE=$(curl -ksS -X POST "https://argocd-server.argocd.svc/api/v1/session" \
              -H "Content-Type: application/json" \
              -d "{\"username\":\"admin\",\"password\":\"${ADMIN_PWD}\"}")
          elif command -v wget >/dev/null 2>&1; then
            RESPONSE=$(wget -qO- --no-check-certificate --header="Content-Type: application/json" \
              --post-data="{\"username\":\"admin\",\"password\":\"${ADMIN_PWD}\"}" \
              "https://argocd-server.argocd.svc/api/v1/session")
          else
            echo "Neither curl nor wget found in the container."
            exit 1
          fi
          TOKEN=$(echo "$RESPONSE" | sed -n 's/.*"token":"\([^"]*\)".*/\1/p')
          if [ -z "$TOKEN" ]; then
            echo "Failed to parse token from response: $RESPONSE"
            exit 1
          fi

          echo "Writing token to secret 'argocd-admin-token' in namespace 'vault'..."
          kubectl -n vault create secret generic argocd-admin-token \
            --from-literal=token="$TOKEN" \
            --from-literal=apiUrl="https://argocd-server.argocd.svc/api/v1" \
            --dry-run=client -o yaml | kubectl apply -f -
          echo "Done."

